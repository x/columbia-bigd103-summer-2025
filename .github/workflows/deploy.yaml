name: Deploy Pages
on:
  workflow_dispatch:
  push:
    branches: [master]
permissions:
  contents: read
  pages: write
  id-token: write
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'


      - name: Clean install (remove lockfile and node_modules)
        run: |
          rm -rf node_modules package-lock.json
          npm install

      - name: Build all lessons
        run: |
          # Create main dist directory
          mkdir -p dist
          
          # Find all slides.md files and build them (excluding ones with HIDE files)
          find lessons -name "slides.md" | while read slidepath; do
            # Extract directory path (remove /slides.md suffix)
            dirpath=$(dirname "$slidepath")
            
            # Skip if HIDE file exists in the same directory
            if [ -f "$dirpath/HIDE" ]; then
              echo "Skipping $slidepath (HIDE file found)"
              continue
            fi
            
            # Determine the base URL path
            basepath="/${{github.event.repository.name}}/$dirpath/"
            
            echo "Building $slidepath with base $basepath"
            
            # Build using a temp directory name that's unique but predictable
            temp_dir_name="temp_build_$(echo "$dirpath" | tr '/' '_')"
            npx slidev build --base "$basepath" "$slidepath" --out "$temp_dir_name"
            
            # The temp directory is created relative to the slides.md file
            temp_build_path="$dirpath/$temp_dir_name"
            
            # Move the built files to the correct location in main dist
            target_dir="dist/$dirpath"
            mkdir -p "$target_dir"
            cp -r "$temp_build_path"/* "$target_dir/"
            
            # Copy any image files from the lesson directory to the target
            find "$dirpath" -type f \( -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" -o -name "*.svg" -o -name "*.webp" \) -exec cp {} "$target_dir/" \;
            
            # Clean up temp directory
            rm -rf "$temp_build_path"
          done
          
          echo "=== DEBUGGING: Final dist directory structure ==="
          find dist -type f | head -30
          echo "=== DEBUGGING: Check if index.html files exist ==="
          find dist -name "index.html"

      - name: Generate index.html
        run: |
          # Create CSS directory
          mkdir -p dist/css
          
          # Download PicoCSS
          curl -s https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.fluid.classless.min.css > dist/css/pico.fluid.classless.min.css
          
          cat > dist/index.html << 'EOF'
          <html>
            <header>
              <link rel="stylesheet" href="css/pico.fluid.classless.min.css">
            </header>
            <body>
              <h1>Columbia BigD103 - Course Lessons</h1>
              <ul>
          EOF

          # Find all slides.md files and generate links (excluding ones with HIDE files)
          find lessons -name "slides.md" | sort | while read slidepath; do
            # Extract directory path (remove /slides.md suffix)
            dirpath=$(dirname "$slidepath")

            # Skip if HIDE file exists in the same directory
            if [ -f "$dirpath/HIDE" ]; then
              echo "Skipping link for $slidepath (HIDE file found)"
              continue
            fi

            # Convert directory path to title (replace slashes and underscores with spaces, capitalize)
            title=$(echo "$dirpath" | sed 's|/| - |g' | sed 's|_| |g' | sed 's|\b\w|\U&|g')

            # Use the original directory structure for URLs
            echo "<li><a href=\"./$dirpath/\">$title</a></li>" >> dist/index.html
          done

          cat >> dist/index.html << 'EOF'
              </ul>
            </body>
          </html>
          EOF

      # Create .nojekyll file to disable Jekyll processing
      - name: Create .nojekyll file and fix routing
        run: |
          # Create .nojekyll file
          touch dist/.nojekyll
          
          # Create a global 404.html that handles SPA routing
          cat > dist/404.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Redirecting...</title>
              <script>
                // Handle SPA routing for GitHub Pages
                const path = window.location.pathname;
                const segments = path.split('/').filter(s => s); // Remove empty segments
                
                // Check if this looks like a lesson path with a slide number
                if (segments.length >= 4 && segments[0] === 'bigd-103' && segments[1] === 'lessons') {
                  const lastSegment = segments[segments.length - 1];
                  const isSlideNumber = /^\d+$/.test(lastSegment);
                  
                  if (isSlideNumber) {
                    // Build the lesson path without the slide number
                    const lessonSegments = segments.slice(0, -1);
                    const lessonPath = '/' + lessonSegments.join('/') + '/';
                    const slideNumber = lastSegment;
                    
                    // Redirect to the lesson with the slide number as hash
                    window.location.replace(lessonPath + '#' + slideNumber);
                  } else {
                    // Just redirect to the lesson base
                    const fullPath = '/' + segments.join('/') + '/';
                    window.location.replace(fullPath);
                  }
                } else {
                  // Fallback: redirect to home
                  window.location.replace('/bigd-103/');
                }
              </script>
              <meta http-equiv="refresh" content="0; url=/bigd-103/">
            </head>
            <body>
              <p>Redirecting to presentation...</p>
              <p><a href="/bigd-103/">Click here if you are not redirected</a></p>
            </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
